openapi: 3.0.3

info:
  version: 1.0.0
  title: 🚕[AOS - 23 - Subsistema_2] Gestión de vehiculos 🚘
  description: >
    ## **[AOS - 23 - Subsistema_2]** API REST para la gestión de los vehiculos de los clientes de un taller.
  license:
    name: MIT
    url: 'https://opensource.org/licenses/MIT'
  contact:
    name: Equipo 7
    url: 'https://www.etsisi.upm.es/'


servers:
  - url: http://127.0.0.1:80/api/v1

tags:
  - name: 'Vehiculo'
    description: Vehiculo

paths:
  /vehiculos:
    get:
      summary: Obtiene todos los vehiculos
      description: |
        La siguiente tabla define los códigos de estado que puede devolver este endpoint
        
        | Status Code | Descripción | Motivo                             |
        | ------------| ------------| -----------------------------------|
        | **200**     | OK          | Listado de vehiculos               |
        | **404**     | NOT FOUND   | No hay ningun vehiculo             |
      operationId: vehiculo_cget
      tags: ['Vehiculo']
      parameters:
        - $ref: '#/components/parameters/pageParam' 
        - $ref: '#/components/parameters/orderParam' 
        - $ref: '#/components/parameters/orderingParam' 
      responses:
        '200':
          description: Lista de vehiculos disponibles
          headers:
            ETag:
              $ref: '#/components/headers/ETag' 
          content:
            application/json:
              schema:
                type: object
                properties:
                  vehiculos:
                    description: array de vehiculos
                    type: array
                    items:
                     $ref: '#/components/schemas/Vehiculo' 
                  links:
                    description: Enlaces de paginación
                    readOnly: true
                    type: object
                    properties:
                      prevPage:
                        $ref: '#/components/schemas/Link' 
                      nextPage:
                        $ref: '#/components/schemas/Link' 
              examples:
                vehiculos-example:
                  $ref: '#/components/examples/vehiculos-example' 
        '404':
          $ref: '#/components/responses/Response_404' 
    options:
      summary:  Proporciona la lista de los métodos HTTP soportados por esta ruta.
      description: Devuelve una cabecera `Allow` con la lista de métodos HTTP soportados (separados por comas).
      operationId: vehiculo_coptions
      tags: ['Vehiculo']
      responses:
        '204':
          description: 'cabecera `Allow` &lt;El cuerpo de la respuesta está vacío&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow' 
    post:
      summary: Añade un nuevo vehiculo
      description: |
        La siguiente tabla define los códigos de estado que puede devolver este endpoint
        
        | Status Code | Descripción          | Motivo                                    |
        | ------------| ---------------------| ------------------------------------------|
        | **201**     | CREATED              | El vehiculo ha sido creado                |
        | **400**     | BAD REQUEST          | El identificador único ya existe          |
        | **422**     | UNPROCESSABLE ENTITY | Falta alguno de los atributos obligatorios|
        |             |                      | o el valor no está permitido              |
      tags: ['Vehiculo']
      operationId: vehiculo_post
      requestBody:
        $ref: '#/components/requestBodies/vehiculoRB' 
      responses:
        '201':
          description: Nuevo vehiculo creado
          headers:
            Location:
              $ref: '#/components/headers/Location' 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehiculo' 
        '400':
          $ref: '#/components/responses/Response_400' 
        '422':
          $ref: '#/components/responses/Response_422' 

  /vehiculos/{DNI}:
    parameters:
      - $ref: '#/components/parameters/DNI' 
    options:
      summary: Proporciona la lista de los métodos HTTP soportados por esta ruta.
      description: Devuelve una cabecera `Allow` con la lista de métodos HTTP soportados (separados por comas).
      operationId: vehiculoDNI_options
      tags: ['Vehiculo']
      responses:
        '204':
          description: 'cabecera `Allow` &lt;El cuerpo de la respuesta está vacío&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow' 
    get:
      summary: Obtiene una lista vehiculo identificado por `DNI`
      description: |
        La siguiente tabla define los códigos de estado que puede devolver este endpoint
        
        | Status Code | Descripción | Motivo                             |
        | ------------| ------------| -----------------------------------|
        | **200**     | OK          | Si el vehiculo existe              |
        | **404**     | NOT FOUND   | Si no existe el vehiculo           |
        
      operationId: vehiculoDNI_get
      tags: ['Vehiculo']
      responses:
        '200':
          description: Lista de vehiculos asociados
          headers:
            ETag:
              $ref: '#/components/headers/ETag' 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listaVehiculos' 
        '404':
          $ref: '#/components/responses/Response_404'
          
  /vehiculos/{vehiculoVIN_id}:
    parameters:
      - $ref: '#/components/parameters/vehiculoVINId' 
    options:
      summary: Proporciona la lista de los métodos HTTP soportados por esta ruta.
      description: Devuelve una cabecera `Allow` con la lista de métodos HTTP soportados (separados por comas).
      operationId: vehiculo_options
      tags: ['Vehiculo']
      responses:
        '204':
          description: 'cabecera `Allow` &lt;El cuerpo de la respuesta está vacío&gt;'
          headers:
            Allow:
              $ref: '#/components/headers/Allow' 
    get:
      summary: Obtiene un vehiculo identificado por `vehiculoVINId`
      description: |
        La siguiente tabla define los códigos de estado que puede devolver este endpoint
        
        | Status Code | Descripción | Motivo                             |
        | ------------| ------------| -----------------------------------|
        | **200**     | OK          | Si el vehiculo existe              |
        | **404**     | NOT FOUND   | Si no existe el vehiculo           |
      operationId: vehiculo_get
      tags: ['Vehiculo']
      responses:
        '200':
          description: Vehiculo
          headers:
            ETag:
              $ref: '#/components/headers/ETag' 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehiculo' 
        '404':
          $ref: '#/components/responses/Response_404' 
    delete:
      summary: Elimina el vehiculo identificado por `vehiculoVINId`
      description: |
        La siguiente tabla define los códigos de estado que puede devolver este endpoint
        
        | Status Code      | Descripción | Motivo                                    |
        | ---------------- | ------------| ------------------------------------------|
        | **204**          | NO CONTENT  | El vehiculo existía y ha sido eliminado   |
        | **404**          | NOT FOUND   | Si el vehiculo no existe                  |
      tags: ['Vehiculo']
      responses:
        '204':
          description: Vehiculo eliminado &lt;Cuerpo de la respuesta vacío&gt;
        '404':
          $ref: '#/components/responses/Response_404' 
    put:
      tags: ['Vehiculo']
      summary: Modifica el vehiculo identificado por `vehiculoVINId`.
      description:  |
        La siguiente tabla define los códigos de estado que puede devolver este endpoint
        | Status Code | Descripción         | Motivo                                        |
        | ------------| --------------------| ----------------------------------------------|
        | **209**     | CONTENT RETURNED    | El vehiculo existía y ha sido actualizado     |
        | **404**     | NOT FOUND           | El vehiculo no existe                         |
        | **412**     | PRECONDITION FAILED | Si el ETag proporcionado no está actualizado  |
        | **422**     | UNPROCESSABLE ENTITY| Valor no permitido en alguno de los attributos|
      operationId: vehiculo_put
      parameters:
        # https://www.rfc-editor.org/rfc/rfc7232.html#page-13
        - $ref: '#/components/parameters/ifMatchParam' 
      requestBody:
        $ref: '#/components/requestBodies/vehiculoUpdate' 
      responses:
        '209':
          description: '`CONTENT RETURNED`: El vehiculo ha sido actualizado'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehiculo' 
        '404':
          $ref: '#/components/responses/Response_404' 
        '412':
          $ref: '#/components/responses/Response_412' 
        '422':
          $ref: '#/components/responses/Response_422' 

components:
  schemas:
    listaVehiculos:
      title: 'listaVehiculos'
      description: >
        Medio de locomoción o transporte que permite el traslado de un lugar a otro de personas o cosas.
      type: object
      properties:
        listaVehiculos:
          type: object
          required: [ DNI ]
          properties:
            id:
              $ref: '#/components/schemas/Id_Vehiculo'
            marca:
              $ref: '#/components/schemas/Marca_Vehiculo'
            modelo:
              $ref: '#/components/schemas/Modelo_Vehiculo'
            año:
              $ref: '#/components/schemas/Fecha_Vehiculo'
            matricula:
              $ref: '#/components/schemas/Matricula_Vehiculo'
            estado:
              $ref: '#/components/schemas/Estado_Vehiculo'
            links:
              description: Enlaces de relación del Vehiculo
              readOnly: true
              type: object
              properties:
                parent:
                  $ref: '#/components/schemas/Link'
                self:
                    $ref: '#/components/schemas/Link'
          example: [{ "vehiculo": {
                      "id": "1HGBH41JXMN109186",
                      "marca": "Seat",
                      "modelo": "Ibiza",
                      "fecha:":"1/7/2000",
                      "estado": "En reparacion",
                      "DNI": "12345678A",
                      "links": {
                        "parent": {
                          "href": "http://example.com/api/v1/vehiculos",
                          "rel": "vehiculo_post vehiculo_cget"
                        },
                        "self": {
                          "href": "http://example.com/api/v1/vehiculos/1HGBH41JXMN109186",
                          "rel": "vehiculo_get vehiculo_delete vehiculo_put"
                        }
                      }
                    }
                  }                
                ]
      
    Vehiculo:
      title: 'Vehiculo'
      description: >
        Medio de locomoción o transporte que permite el traslado de un lugar a otro de personas o cosas.
      type: object
      properties:
        vehiculo:
          type: object
          required: [ id ]
          properties:
            id:
              $ref: '#/components/schemas/Id_Vehiculo'
            marca:
              $ref: '#/components/schemas/Marca_Vehiculo'
            modelo:
              $ref: '#/components/schemas/Modelo_Vehiculo'
            año:
              $ref: '#/components/schemas/Fecha_Vehiculo'
            matricula:
              $ref: '#/components/schemas/Matricula_Vehiculo'
            estado:
              $ref: '#/components/schemas/Estado_Vehiculo'
            links:
              description: Enlaces de relación del Vehiculo
              readOnly: true
              type: object
              properties:
                parent:
                  $ref: '#/components/schemas/Link'
                self:
                  $ref: '#/components/schemas/Link'
      example: { "vehiculo": {
                    "id": "1HGBH41JXMN109186",
                    "marca": "Seat",
                    "modelo": "Ibiza",
                    "fecha:":"1/7/2000",
                    "estado": "En reparacion",
                    "DNI": "12345678A",
                    "links": {
                      "parent": {
                        "href": "http://example.com/api/v1/vehiculos",
                        "rel": "vehiculo_post vehiculo_cget"
                      },
                      "self": {
                        "href": "http://example.com/api/v1/vehiculos/1HGBH41JXMN109186",
                        "rel": "vehiculo_get vehiculo_delete vehiculo_put"
                      }
                    }
                  }
               }

    DNI:
      title: Identificador de cliente
      type: string
      pattern: "[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][A-Z]"
      x-faker: helpers.regexpStyleStringParse()

    Id_Vehiculo:
      title: Identificador único del vehiculo
      type: string
      pattern: "^[A-Z,0-9][A-Z,0-9][A-Z,0-9][A-Z,0-9][A-Z,0-9][A-Z,0-9][A-Z,0-9][A-Z,0-9][0-9][A-Z,0-9][A-Z,0-9][0-9][0-9][0-9][0-9][0-9][0-9]"
      #example: "1HGBH41JXMN109186"
      x-faker: helpers.regexpStyleStringParse()
    
    Marca_Vehiculo:
      title: Marca del vehiculo
      type: string
      example: "Seat"

    Modelo_Vehiculo:
      title: Modelo del vehiculo
      type: string
      example: "Sedán"

    Fecha_Vehiculo:
      title: Año de matriculacion del vehiculo
      type: string
      pattern: "^[1-31]/[1-12]/[1900-2500]"
      example: "1/12/1998"
      x-faker: helpers.regexpStyleStringParse()

    Matricula_Vehiculo:
      title: Matricula del vehiculo
      type: string
      pattern: "^[0-9][0-9][0-9][0-9][A-Z][A-Z][A-Z]"
      #example: "1254BCB"
      x-faker: helpers.regexpStyleStringParse()

    Estado_Vehiculo:
      title: |
        Clasificación de los vehiculos dependiendo de si estan en reparacion o arreglado
        * Arreglado
        * En reparación
      type: string
      enum: [ Arreglado, EnReparacion ]
      x-faker: helpers.arrayElement()

    HTTP_Problem:
      type: object
      externalDocs:
        url: https://tools.ietf.org/html/rfc7807
      description: |
        Problem Details for HTTP APIs
        [https://tools.ietf.org/html/rfc7807](https://tools.ietf.org/html/rfc7807)
      properties:
        type:
          type: string
          format: uri
          description: A URI reference [RFC3986] that identifies the problem type
        title:
          type: string
          description: short human-readable summary of the problem type
        status:
          type: number
          description: HTTP status code
        detail:
          type: string
          description: Human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          format: uri
          description: >
            A URI reference that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.

    Link:
      description: Enlace de relación
      title: '🔗 Link'
      type: object
      properties:
        href:
          description: URL del enlace
          type: string
          format: uri
          x-faker: internet.url
        rel:
          description: "Relación del recurso enlazado con el actual. Contiene una lista de tipos
                    de relaciones separados por espacio."
          type: string
          x-faker: lorem.words
      example:
        href: https://www.example.com/path/resource
        rel: relAction1 relAction2 

  headers:
    ETag:
      description: "Entity Tag (identificador único proporcionado para validación de caché)"
      schema:
        type: string
        pattern: "[0-9a-f]*"
        example:
          33a64df551425fcc
    Allow:
      description: Lista de métodos HTTP soportados
      schema:
        type: string
        example: GET, DELETE, PUT, OPTIONS
    Location:
      description: '`URI` del nuevo recurso'
      schema:
        type: string
        format: uri
        x-faker: internet.url
        example:
            https://example.com/api/v1/vehiculos/1HGBH41JXMN109186

  requestBodies:
    vehiculoRB:
      description: Información del nuevo Vehiculo
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [ id ]
            properties:
              id:
                $ref: '#/components/schemas/Id_Vehiculo'
              modelo:
                 $ref: '#/components/schemas/Modelo_Vehiculo'
              fecha:
                 $ref: '#/components/schemas/Fecha_Vehiculo'
              matricula:
                 $ref: '#/components/schemas/Matricula_Vehiculo'
              Estado:
                 $ref: '#/components/schemas/Estado_Vehiculo'
              DNI:
                $ref: '#/components/schemas/DNI'

    vehiculoUpdate:
      description: Nuevos atributos del Vehiculo
      required: true
      content:
        application/json:
          schema:
            type: object
            required: [ id ]
            properties:
              modelo:
                 $ref: '#/components/schemas/Modelo_Vehiculo'
              fecha:
                 $ref: '#/components/schemas/Fecha_Vehiculo'
              matricula:
                 $ref: '#/components/schemas/Matricula_Vehiculo'
              Estado:
                 $ref: '#/components/schemas/Estado_Vehiculo'
                 
  responses:
    Response_400:
      description: '`BAD REQUEST` El identificador único ya existe.'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-400:
              $ref: '#/components/examples/response-http-400'
    Response_404:
      description: '`NOT FOUND`: recurso no disponible'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-404:
              $ref: '#/components/examples/response-http-404'
    Response_409:
      description: '`CONFLICT`: el recurso no reúne las condiciones adecuadas'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-404:
              $ref: '#/components/examples/response-http-409'
    Response_412:
      description: '`PRECONDITION FAILED`: El ETag proporcionado no está actualizado'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-412:
              $ref: '#/components/examples/response-http-412'
    Response_422:
      description: '`UNPROCESSABLE ENTITY` Falta alguno de los atributos obligatorios o son incorrectos.'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/HTTP_Problem'
          examples:
            response-http-422:
              $ref: '#/components/examples/response-http-422'
  parameters:
    DNI:
      name: DNI
      in: path
      description: Identificador único de persona
      required: true
      schema:
        $ref: '#/components/schemas/DNI'
    vehiculoVINId:
      name: vehiculoVIN_id
      in: path
      description: Identificador único del Vehiculo
      required: true
      schema:
        $ref: '#/components/schemas/Id_Vehiculo'
    ifMatchParam:
      name: If-Match
      in: header
      description: ETag actual del recurso que se desea modificar
      required: true
      schema:
        type: string
        pattern: "[0-9a-f]*"
    orderParam:
      name: order
      in: query
      description: 'Criterio de ordenación: `id`'
      required: false
      allowEmptyValue: false
      schema:
        type: string
        enum:
          - id
    orderingParam:
      name: ordering
      in: query
      description: 'Ordenación: `ASC` | `DESC`'
      required: false
      allowEmptyValue: false
      schema:
        type: string
        enum:
          - ASC
          - DESC
    pageParam:
      name: page
      in: query
      description: 'Número de página'
      required: false
      allowEmptyValue: false
      schema:
        type: integer
        minimum: 1

  examples:
    vehiculos-example:
      value:
        vehiculos:
          - { "vehiculo": { "id": "1HGBH41JXMN109186", "marca": "Seat", "modelo": "Ibiza", "fecha:":"1/7/2000", "DNI": "12345678A", "matricula": "1234API", "estado": "En reparacion",
                "links": {
                  "parent": { "href": "https://example.com/api/v1/vehiculos", "rel": "vehiculo_post vehiculo_cget"},
                  "self": { "href": "https://example.com/api/v1vehiculos/1HGBH41JXMN109186", "rel": "vehiculo_get vehiculo_delete vehiculo_put" }
              }}}
          - { "vehiculo": { "id": "5YJSA1DG9DFP14705", "marca": "Porsche", "modelo": "911", "fecha:":"1/7/2010", "DNI": "12345678A", "matricula": "4365RES", "estado": "En reparacion",
                "links": {
                  "parent": { "href": "https://example.com/api/v1/vehiculos", "rel": "vehiculo_post vehiculo_cget"},
                  "self": { "href": "https://example.com/api/v1/vehiculos/5YJSA1DG9DFP14705", "rel": "vehiculo_get vehiculo_delete vehiculo_put" }
              }}}
        links: {
          "prevPage": { "href": "https://example.com/api/v1/vehiculos?page=2", "rel": "prevPage" },
          "nextPage": { "href": "https://example.com/api/v1/vehiculos?page=4", "rel": "nextPage" }
        }

    response-http-400:
      value:
        type: https://httpstatuses.com/400
        title: UNPROCESSABLE ENTITY
        status: 400
        detail: El identificador único ya existe
        instance: about:blank

    response-http-404:
      value:
        type: https://httpstatuses.com/404
        title: NOT FOUND
        status: 404
        detail: El recurso solicitado no está disponible.
        instance: about:blank

    response-http-409:
      value:
        type: https://httpstatuses.com/409
        title: NOT FOUND
        status: 409
        detail: El recurso no reúne las condiciones requeridas para la operación.
        instance: about:blank

    response-http-412:
      value:
        type: https://httpstatuses.com/412
        title: PRECONDITION FAILED
        status: 412
        detail: El ETag proporcionado no está actualizado
        instance: about:blank

    response-http-422:
      value:
        type: https://httpstatuses.com/422
        title: UNPROCESSABLE ENTITY
        status: 422
        detail: Falta alguno de los atributos obligatorios o contiene un valor no admitido
        instance: about:blank
